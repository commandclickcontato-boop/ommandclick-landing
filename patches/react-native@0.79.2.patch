diff --git a/Libraries/Core/ExceptionsManager.js b/Libraries/Core/ExceptionsManager.js
index 05160ce36285bc27cb7776bff15faf0a20e86354..c1557ad62c64be6f9e62a0bd35b46739d66e14a6 100644
--- a/Libraries/Core/ExceptionsManager.js
+++ b/Libraries/Core/ExceptionsManager.js
@@ -12,6 +12,8 @@
 
 import type {ExtendedError} from './ExtendedError';
 import type {ExceptionData} from './NativeExceptionsManager';
+import LogBoxLog from '../LogBox/Data/LogBoxLog';
+import { Platform } from 'react-native';
 
 export class SyntheticError extends Error {
   name: string = '';
@@ -53,6 +55,85 @@ function preprocessException(data: ExceptionData): ExceptionData {
   return data;
 }
 
+function formatStack(stack: [any]) {
+  return stack.map((item) => {
+    const isComponentStack = !!item.fileName;
+    if (isComponentStack) {
+      return `
+      <${item.content}/>
+      ${item.fileName}:${item.location.row}:${item.location.column}`
+    } else {
+      return `
+      ${item.methodName}
+      ${item.file}:${item.lineNumber}:${item.column}`
+    }
+  }).join('\n');
+}
+function reportExceptionToNative(data: ExceptionData, e: ExtendedError) {
+  const temp = {
+    ...data,
+    isComponentError: !!e.isComponentError,
+  };
+
+  const ParseLogBoxLog = require('../LogBox/Data/parseLogBoxLog');
+  const parsed = ParseLogBoxLog.parseLogBoxException(temp);
+  const logParsed = new LogBoxLog(parsed);
+
+  logParsed.handleSymbolicateAsync().then(() => {
+    const stack = logParsed.getAvailableStack();
+    const componentStack = logParsed.getAvailableComponentStack();
+
+    // Function to strip ANSI color codes
+    const stripAnsiColors = (str) => {
+      return str ? str.replace(/\u001b\[[0-9;]*m/g, '') : '';
+    };
+    const codeFrame = stripAnsiColors(logParsed.codeFrame?.content);
+    const codeFrameLocation = `${logParsed.codeFrame?.fileName} (${logParsed.codeFrame?.location.row}:${logParsed.codeFrame?.location.column})`;
+    const componentCodeFrame = stripAnsiColors(logParsed.componentCodeFrame?.content);
+    const componentCodeFrameLocation = `${logParsed.componentCodeFrame?.fileName} (${logParsed.componentCodeFrame?.location.row}:${logParsed.componentCodeFrame?.location.column})`;
+    const formattedStack = formatStack(stack);
+    const formattedComponentStack = formatStack(componentStack);
+
+    const errorDetails = `
+    ${codeFrame && `codeFrame: 
+${codeFrame}
+    ${codeFrameLocation}`}
+    
+    ${componentCodeFrame && `componentCodeFrame: 
+${componentCodeFrame}
+    ${componentCodeFrameLocation}`}
+
+    ${formattedStack && `stack: ${formattedStack}`}
+
+    ${formattedComponentStack && `componentStack: ${formattedComponentStack}`}
+    `
+
+    const errorMsg = logParsed.category;
+
+    const combinedErrorMsg = `${errorMsg}\n\n%errorDetails%${errorDetails}`;
+    const NativeExceptionsManager =
+      require('./NativeExceptionsManager').default;
+
+    if (NativeExceptionsManager) {
+      const errorData = {
+        message: combinedErrorMsg,
+        name: errorMsg,
+        componentStack: componentStack,
+        stack: stack,
+        id: logParsed.id,
+        isFatal: false
+      }
+
+      if (Platform.OS === 'android') {
+        errorData.isFatal = true;
+        errorData.extraData = null;
+      }
+
+      NativeExceptionsManager.reportException(errorData);
+    }
+  });
+}
+
 /**
  * Handles the developer-visible aspect of errors and exceptions
  */
@@ -104,6 +185,11 @@ function reportException(
     extraData,
   });
 
+  // TODO: maybe hide this behind if(__VIBECODE__)
+  reportExceptionToNative(data, e);
+  console.log(e);
+  return;
+
   if (reportToConsole) {
     // we feed back into console.error, to make sure any methods that are
     // monkey patched on top of console.error are called when coming from
diff --git a/Libraries/LogBox/Data/LogBoxData.js b/Libraries/LogBox/Data/LogBoxData.js
index 1c11fd4e0b46f5485fcc22cd1274fbbdec01ac19..2fb02a7f642d0789203accaec85e88930619a3ce 100644
--- a/Libraries/LogBox/Data/LogBoxData.js
+++ b/Libraries/LogBox/Data/LogBoxData.js
@@ -188,9 +188,10 @@ function appendNewLog(newLog: LogBoxLog) {
         handleUpdate();
       }
     });
-  } else if (newLog.level === 'syntax') {
-    logs.add(newLog);
-    setSelectedLog(logs.size - 1);
+  // Make syntax errors dismissible  
+  // } else if (newLog.level === 'syntax') {
+  //   logs.add(newLog);
+  //   setSelectedLog(logs.size - 1);
   } else {
     logs.add(newLog);
     handleUpdate();
diff --git a/Libraries/LogBox/Data/LogBoxLog.js b/Libraries/LogBox/Data/LogBoxLog.js
index be475215db88c9ffaa871a1e4ed3bfc64286b0e1..ba3a79d454cfa3d599d9b268b486f6fcb4732027 100644
--- a/Libraries/LogBox/Data/LogBoxLog.js
+++ b/Libraries/LogBox/Data/LogBoxLog.js
@@ -163,6 +163,50 @@ class LogBoxLog {
     }
   }
 
+  handleSymbolicateAsync(): Promise<void> {
+    const callback = () => {};
+    const promises = [];
+    if (
+      this.symbolicated.status !== 'PENDING' &&
+      this.symbolicated.status !== 'COMPLETE'
+    ) {
+      this.updateStatus(null, null, null, callback);
+      promises.push(LogBoxSymbolication.symbolicate(this.stack, this.extraData).then(
+        data => {
+          this.updateStatus(null, data?.stack, data?.codeFrame, callback);
+        },
+        error => {
+          this.updateStatus(error, null, null, callback);
+        },
+      ));
+    }
+    if (
+      this.componentStack != null &&
+      this.componentStackType === 'stack' &&
+      this.symbolicatedComponentStack.status !== 'PENDING' &&
+      this.symbolicatedComponentStack.status !== 'COMPLETE'
+    ) {
+      this.updateComponentStackStatus(null, null, null, callback);
+      const componentStackFrames = convertComponentStateToStack(
+        this.componentStack,
+      );
+      promises.push(LogBoxSymbolication.symbolicate(componentStackFrames, []).then(
+        data => {
+          this.updateComponentStackStatus(
+            null,
+            convertStackToComponentStack(data.stack),
+            data?.codeFrame,
+            callback,
+          );
+        },
+        error => {
+          this.updateComponentStackStatus(error, null, null, callback);
+        },
+      ));
+    }
+    return Promise.all(promises);
+  }
+
   handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {
     if (
       this.symbolicated.status !== 'PENDING' &&
diff --git a/Libraries/LogBox/LogBox.js b/Libraries/LogBox/LogBox.js
index bc0eb4b3042c5f570be880dd11f94151ab41b199..2d7d57076259ac99fca2eebc7df4bcb70f534466 100644
--- a/Libraries/LogBox/LogBox.js
+++ b/Libraries/LogBox/LogBox.js
@@ -34,7 +34,7 @@ interface ILogBox {
 /**
  * LogBox displays logs in the app.
  */
-if (__DEV__) {
+if (false) { // __DEV__
   const LogBoxData = require('./Data/LogBoxData');
   const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');
 
diff --git a/Libraries/LogBox/UI/LogBoxInspector.js b/Libraries/LogBox/UI/LogBoxInspector.js
index be889b06fd58e8a93f7e512e2874b2234c728c4f..3b93f5dcaeac90f6d5813b3258332e3cf66ef639 100644
--- a/Libraries/LogBox/UI/LogBoxInspector.js
+++ b/Libraries/LogBox/UI/LogBoxInspector.js
@@ -76,6 +76,8 @@ export default function LogBoxInspector(props: Props): React.Node {
         onDismiss={props.onDismiss}
         onMinimize={props.onMinimize}
         level={log.level}
+        log={log}
+        logs={logs}
       />
     </View>
   );
diff --git a/Libraries/LogBox/UI/LogBoxInspectorFooter.js b/Libraries/LogBox/UI/LogBoxInspectorFooter.js
index c3a7b692106d9233d508d7dabfc082f091b2d257..37d192543e1b2035cb714b03e1b808ac21f0adcd 100644
--- a/Libraries/LogBox/UI/LogBoxInspectorFooter.js
+++ b/Libraries/LogBox/UI/LogBoxInspectorFooter.js
@@ -8,7 +8,7 @@
  * @format
  */
 
-import type {LogLevel} from '../Data/LogBoxLog';
+import LogBoxLog, { type LogLevel } from '../Data/LogBoxLog';
 
 import View from '../../Components/View/View';
 import StyleSheet from '../../StyleSheet/StyleSheet';
@@ -16,28 +16,54 @@ import Text from '../../Text/Text';
 import LogBoxInspectorFooterButton from './LogBoxInspectorFooterButton';
 import * as LogBoxStyle from './LogBoxStyle';
 import * as React from 'react';
+import Clipboard from '@react-native-clipboard/clipboard';
 
 type Props = $ReadOnly<{
   onDismiss: () => void,
   onMinimize: () => void,
   level?: ?LogLevel,
+  log?: LogBoxLog,
+  logs?: $ReadOnlyArray<LogBoxLog>,
 }>;
 
 export default function LogBoxInspectorFooter(props: Props): React.Node {
-  if (props.level === 'syntax') {
-    return (
-      <View style={styles.root}>
-        <View style={styles.button}>
-          <Text id="logbox_dismissable_text" style={styles.syntaxErrorText}>
-            This error cannot be dismissed.
-          </Text>
-        </View>
-      </View>
-    );
+  // if (props.level === 'syntax') {
+  //   return (
+  //     <View style={styles.root}>
+  //       <View style={styles.button}>
+  //         <Text id="logbox_dismissable_text" style={styles.syntaxErrorText}>
+  //           This error cannot be dismissed.
+  //         </Text>
+  //       </View>
+  //     </View>
+  //   );
+  // }
+
+  const getCopyText = (log: LogBoxLog) => {
+    const message = log.message.content;
+    const filePath = log.codeFrame?.fileName;
+    const codeContent = log.codeFrame?.content;
+    const copyText = `${message}\n\n${filePath}\n\n${codeContent}`.replaceAll(/\u001b\[[0-9;]*m/g, '');
+    return copyText;
+  }
+
+  const copyToClipboard = () => {
+    if (props.log) {
+      Clipboard.setString(getCopyText(props.log));
+    }
+  }
+
+  const copyAllToClipboard = () => {
+    if (props.logs) {
+      const copyText = props.logs.map(log => getCopyText(log)).join('\n');
+      Clipboard.setString(copyText);
+    }
   }
 
   return (
     <View style={styles.root}>
+      <LogBoxInspectorFooterButton text="Copy" onPress={copyToClipboard} />
+      <LogBoxInspectorFooterButton text="Copy All" onPress={copyAllToClipboard} />
       <LogBoxInspectorFooterButton
         id="logbox_footer_button_dismiss"
         text="Dismiss"
diff --git a/Libraries/Network/RCTHTTPRequestHandler.h b/Libraries/Network/RCTHTTPRequestHandler.h
index 768982a9de592ab6296f4cf827f91df49cefea98..f1dbd0b370f65abe4ed59d5d50e0c3b3219c0064 100644
--- a/Libraries/Network/RCTHTTPRequestHandler.h
+++ b/Libraries/Network/RCTHTTPRequestHandler.h
@@ -14,6 +14,22 @@ typedef NSURLSessionConfiguration * (^NSURLSessionConfigurationProvider)(void);
  * app.
  */
 RCT_EXTERN void RCTSetCustomNSURLSessionConfigurationProvider(NSURLSessionConfigurationProvider);
+
+/**
+ * Set proxy credentials for HTTP requests.
+ */
+RCT_EXTERN void RCTSetProxyCredentials(NSString *username, NSString *password);
+
+/**
+ * Set proxy host for HTTP requests.
+ */
+RCT_EXTERN void RCTSetProxyHost(NSString *host);
+
+/**
+ * Set proxied domains for HTTP requests.
+ */
+RCT_EXTERN void RCTSetProxiedDomains(NSArray<NSString *> *domains);
+
 /**
  * This is the default RCTURLRequestHandler implementation for HTTP requests.
  */
diff --git a/Libraries/Network/RCTHTTPRequestHandler.mm b/Libraries/Network/RCTHTTPRequestHandler.mm
index 4a0353396d7eda980da9d4aef0ee36b557b4a911..a31d33c278b90cfe2d37b54b07ab3bc5dcadf18b 100644
--- a/Libraries/Network/RCTHTTPRequestHandler.mm
+++ b/Libraries/Network/RCTHTTPRequestHandler.mm
@@ -20,11 +20,32 @@ @interface RCTHTTPRequestHandler () <NSURLSessionDataDelegate, RCTTurboModule>
 
 static NSURLSessionConfigurationProvider urlSessionConfigurationProvider;
 
+static NSString *proxyUsername = nil;
+static NSString *proxyPassword = nil;
+static NSString *proxyHost = nil;
+static NSSet<NSString *> *proxiedDomains = nil;
+
 void RCTSetCustomNSURLSessionConfigurationProvider(NSURLSessionConfigurationProvider provider)
 {
   urlSessionConfigurationProvider = provider;
 }
 
+void RCTSetProxyCredentials(NSString *username, NSString *password)
+{
+  proxyUsername = username;
+  proxyPassword = password;
+}
+
+void RCTSetProxyHost(NSString *host)
+{
+  proxyHost = host;
+}
+
+void RCTSetProxiedDomains(NSArray<NSString *> *domains)
+{
+  proxiedDomains = [NSSet setWithArray:domains];
+}
+
 @implementation RCTHTTPRequestHandler {
   NSMapTable *_delegates;
   NSURLSession *_session;
@@ -66,6 +87,42 @@ - (BOOL)canHandleRequest:(NSURLRequest *)request
 - (NSURLSessionDataTask *)sendRequest:(NSURLRequest *)request withDelegate:(id<RCTURLRequestDelegate>)delegate
 {
   std::lock_guard<std::mutex> lock(_mutex);
+
+  // Proxy code
+  NSMutableURLRequest *mutableRequest = [request mutableCopy];
+  NSURL *originalURL = request.URL;
+  if (originalURL.host && proxyHost && proxiedDomains != nil) {
+    BOOL shouldProxy = NO;
+    for (NSString *domain in proxiedDomains) {
+      if ([originalURL.host isEqualToString:domain] || 
+          [originalURL.host hasSuffix:[NSString stringWithFormat:@".%@", domain]]) {
+        shouldProxy = YES;
+        break;
+      }
+    }
+    
+    if (shouldProxy) {
+      NSString *modifiedHost = [NSString stringWithFormat:@"%@.%@", originalURL.host, proxyHost];
+
+      NSURLComponents *components = [NSURLComponents componentsWithURL:originalURL resolvingAgainstBaseURL:NO];
+      components.host = modifiedHost;
+
+      if (proxyUsername && proxyPassword) {
+        components.user = proxyUsername;
+        components.password = proxyPassword;
+      }
+
+      NSURL *modifiedURL = [components URL];
+      if (modifiedURL) {
+        mutableRequest.URL = modifiedURL;
+        NSLog(@"Modified URL: %@", mutableRequest.URL.absoluteString);
+        if (proxyUsername && [proxyUsername length] > 0) {
+          [mutableRequest setValue:proxyUsername forHTTPHeaderField:@"X-Vibecode-Project"];
+        }
+      }
+    }
+  }
+
   // Lazy setup
   if (!_session && [self isValid]) {
     // You can override default NSURLSession instance property allowsCellularAccess (default value YES)
@@ -100,7 +157,7 @@ - (NSURLSessionDataTask *)sendRequest:(NSURLRequest *)request withDelegate:(id<R
                                            valueOptions:NSPointerFunctionsStrongMemory
                                                capacity:0];
   }
-  NSURLSessionDataTask *task = [_session dataTaskWithRequest:request];
+  NSURLSessionDataTask *task = [_session dataTaskWithRequest:mutableRequest];
   [_delegates setObject:delegate forKey:task];
   [task resume];
   return task;
diff --git a/React/Base/RCTAssert.m b/React/Base/RCTAssert.m
index ca8542eb6acf2feebb70a9da47ece608d7bde773..63f844b7c9977b90b39a6fc136502d467a69bec7 100644
--- a/React/Base/RCTAssert.m
+++ b/React/Base/RCTAssert.m
@@ -127,9 +127,9 @@ void RCTFatal(NSError *error)
   if (fatalHandler) {
     fatalHandler(error);
   } else {
-#if DEBUG
+// #if DEBUG
     @try {
-#endif
+// #endif
       NSString *name = [NSString stringWithFormat:@"%@: %@", RCTFatalExceptionName, error.localizedDescription];
 
       // Truncate the localized description to 175 characters to avoid wild screen overflows
@@ -145,10 +145,10 @@ void RCTFatal(NSError *error)
       // reason: <underlying error description plus JS stack trace, truncated to 175 characters>
       // userInfo: <underlying error userinfo, plus untruncated description plus JS stack trace>
       @throw [[NSException alloc] initWithName:name reason:message userInfo:userInfo];
-#if DEBUG
+// #if DEBUG
     } @catch (NSException *e) {
     }
-#endif
+// #endif
   }
 }
 
diff --git a/React/Base/RCTDefines.h b/React/Base/RCTDefines.h
index 228d92c2960a78ff209b8856884b179baed320c8..f87902b18c7eaa8169977f840d0c9c570b88755d 100644
--- a/React/Base/RCTDefines.h
+++ b/React/Base/RCTDefines.h
@@ -92,7 +92,7 @@
  * By default though, it will inherit from RCT_DEV.
  */
 #ifndef RCT_DEV_MENU
-#define RCT_DEV_MENU RCT_DEV
+#define RCT_DEV_MENU 1 //RCT_DEV
 #endif
 
 #ifndef RCT_DEV_SETTINGS_ENABLE_PACKAGER_CONNECTION
diff --git a/React/Base/RCTRedBoxSetEnabled.m b/React/Base/RCTRedBoxSetEnabled.m
index 51142be37507b2df40c103cc155bb75ef7e73410..7a077df9fb75227202d34ea468614f582324359f 100644
--- a/React/Base/RCTRedBoxSetEnabled.m
+++ b/React/Base/RCTRedBoxSetEnabled.m
@@ -10,7 +10,7 @@
 #if RCT_DEV
 static BOOL redBoxEnabled = YES;
 #else
-static BOOL redBoxEnabled = NO;
+static BOOL redBoxEnabled = YES; // NO;
 #endif
 
 void RCTRedBoxSetEnabled(BOOL enabled)
diff --git a/React/CoreModules/RCTDevMenu.mm b/React/CoreModules/RCTDevMenu.mm
index 3918ea0b1425fee133701ac3a50a299cf981078c..d606ef17879b9e95779607b69ee83a92c2914914 100644
--- a/React/CoreModules/RCTDevMenu.mm
+++ b/React/CoreModules/RCTDevMenu.mm
@@ -105,13 +105,13 @@ @implementation RCTDevMenu {
 
 RCT_EXPORT_MODULE()
 
-+ (void)initialize
-{
-  // We're swizzling here because it's poor form to override methods in a category,
-  // however UIWindow doesn't actually implement motionEnded:withEvent:, so there's
-  // no need to call the original implementation.
-  RCTSwapInstanceMethods([UIWindow class], @selector(motionEnded:withEvent:), @selector(RCT_motionEnded:withEvent:));
-}
+//+ (void)initialize
+//{
+//  // We're swizzling here because it's poor form to override methods in a category,
+//  // however UIWindow doesn't actually implement motionEnded:withEvent:, so there's
+//  // no need to call the original implementation.
+//  RCTSwapInstanceMethods([UIWindow class], @selector(motionEnded:withEvent:), @selector(RCT_motionEnded:withEvent:));
+//}
 
 + (BOOL)requiresMainQueueSetup
 {
diff --git a/React/CoreModules/RCTRedBox.h b/React/CoreModules/RCTRedBox.h
index a8031aa3aede9e60d22cf94015607ace05441ff8..2f5615b2a50011882a5ef8b5131742b7bbaafe6a 100644
--- a/React/CoreModules/RCTRedBox.h
+++ b/React/CoreModules/RCTRedBox.h
@@ -14,6 +14,8 @@
 
 typedef void (^RCTRedBoxButtonPressHandler)(void);
 
+static NSString * const VibecodeRedBoxErrorShown = @"VibecodeRedBoxErrorShown";
+
 @interface RCTRedBox : NSObject <RCTBridgeModule>
 
 - (void)registerErrorCustomizer:(id<RCTErrorCustomizer>)errorCustomizer;
diff --git a/React/CoreModules/RCTRedBox.mm b/React/CoreModules/RCTRedBox.mm
index fb057b969214ee3d4d691a8530a49c4a8f727c34..0a20ae4ed3dd08fa6ecd5e5efaf98ff42c508902 100644
--- a/React/CoreModules/RCTRedBox.mm
+++ b/React/CoreModules/RCTRedBox.mm
@@ -612,23 +612,55 @@ - (void)showErrorMessage:(NSString *)message
       self->_extraDataViewController.actionDelegate = self;
     }
 
+    // Emit event when showErrorMessage is called
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wdeprecated-declarations"
+//     [[self->_moduleRegistry moduleForName:"EventDispatcher"] sendDeviceEventWithName:@"redBoxErrorShown"
+//                                                                                 body:@{
+//                                                                                   @"message": message ?: @"",
+//                                                                                   @"isUpdate": @(isUpdate),
+//                                                                                   @"errorCookie": @(errorCookie)
+//                                                                                 }];
+// #pragma clang diagnostic pop
+
+    // Also post a notification for native listeners
+    NSMutableArray *stackDictionaries = [NSMutableArray array];
+    for (RCTJSStackFrame *frame in stack) {
+      NSMutableDictionary *frameDict = [NSMutableDictionary dictionary];
+      if (frame.methodName) frameDict[@"methodName"] = frame.methodName;
+      if (frame.file) frameDict[@"file"] = frame.file;
+      frameDict[@"lineNumber"] = @(frame.lineNumber);
+      frameDict[@"column"] = @(frame.column);
+      frameDict[@"collapse"] = @(frame.collapse);
+      [stackDictionaries addObject:frameDict];
+    }
+    
+    [[NSNotificationCenter defaultCenter] postNotificationName:VibecodeRedBoxErrorShown
+                                                        object:self
+                                                      userInfo:@{
+                                                        @"message": message ?: @"",
+                                                        @"isUpdate": @(isUpdate),
+                                                        @"errorCookie": @(errorCookie),
+                                                        @"stack": stackDictionaries
+                                                      }];
+
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
     [[self->_moduleRegistry moduleForName:"EventDispatcher"] sendDeviceEventWithName:@"collectRedBoxExtraData"
                                                                                 body:nil];
 #pragma clang diagnostic pop
-    if (!self->_controller) {
-      self->_controller = [[RCTRedBoxController alloc] initWithCustomButtonTitles:self->_customButtonTitles
-                                                             customButtonHandlers:self->_customButtonHandlers];
-      self->_controller.actionDelegate = self;
-    }
-
-    RCTErrorInfo *errorInfo = [[RCTErrorInfo alloc] initWithErrorMessage:message stack:stack];
-    errorInfo = [self _customizeError:errorInfo];
-    [self->_controller showErrorMessage:errorInfo.errorMessage
-                              withStack:errorInfo.stack
-                               isUpdate:isUpdate
-                            errorCookie:errorCookie];
+//    if (!self->_controller) {
+//      self->_controller = [[RCTRedBoxController alloc] initWithCustomButtonTitles:self->_customButtonTitles
+//                                                             customButtonHandlers:self->_customButtonHandlers];
+//      self->_controller.actionDelegate = self;
+//    }
+//
+//    RCTErrorInfo *errorInfo = [[RCTErrorInfo alloc] initWithErrorMessage:message stack:stack];
+//    errorInfo = [self _customizeError:errorInfo];
+//    [self->_controller showErrorMessage:errorInfo.errorMessage
+//                              withStack:errorInfo.stack
+//                               isUpdate:isUpdate
+//                            errorCookie:errorCookie];
   });
 }
 
@@ -656,7 +688,8 @@ - (void)loadExtraDataViewController
 
 - (void)invalidate
 {
-  [self dismiss];
+  // workaround for https://github.com/facebook/react-native/pull/50867
+  // [self dismiss];
 }
 
 - (void)redBoxController:(__unused RCTRedBoxController *)redBoxController
diff --git a/ReactAndroid/src/main/java/com/facebook/react/devsupport/DefaultDevLoadingViewImplementation.kt b/ReactAndroid/src/main/java/com/facebook/react/devsupport/DefaultDevLoadingViewImplementation.kt
index 0844b8b725d3bb3af321bd45d9e8789957863539..7668cc4a7a74d13f1bfa4ff4e438cd81bb143c92 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/devsupport/DefaultDevLoadingViewImplementation.kt
+++ b/ReactAndroid/src/main/java/com/facebook/react/devsupport/DefaultDevLoadingViewImplementation.kt
@@ -11,10 +11,13 @@ import android.content.Context
 import android.graphics.Rect
 import android.view.Gravity
 import android.view.LayoutInflater
+import android.view.View
 import android.view.ViewGroup
 import android.view.WindowManager
+import android.widget.FrameLayout
 import android.widget.PopupWindow
 import android.widget.TextView
+import androidx.core.view.children
 import com.facebook.common.logging.FLog
 import com.facebook.react.R
 import com.facebook.react.bridge.UiThreadUtil
@@ -22,15 +25,18 @@ import com.facebook.react.common.ReactConstants
 import com.facebook.react.devsupport.interfaces.DevLoadingViewManager
 import java.util.Locale
 
+public interface DevLoadingMessageDisplay {
+  public fun showMessage(message: String)
+  public fun hideMessage()
+}
+
 /**
  * Default implementation of Dev Loading View Manager to display loading messages on top of the
  * screen. All methods are thread safe.
  */
 public class DefaultDevLoadingViewImplementation(
-    private val reactInstanceDevHelper: ReactInstanceDevHelper
+  private val reactInstanceDevHelper: ReactInstanceDevHelper
 ) : DevLoadingViewManager {
-  private var devLoadingView: TextView? = null
-  private var devLoadingPopup: PopupWindow? = null
 
   override fun showMessage(message: String) {
     if (!isEnabled) {
@@ -45,11 +51,11 @@ public class DefaultDevLoadingViewImplementation(
     }
     UiThreadUtil.runOnUiThread {
       val percentage =
-          if (done != null && total != null && total > 0)
-              String.format(Locale.getDefault(), " %.1f%%", done.toFloat() / total * 100)
-          else ""
-      devLoadingView?.text =
-          "${status ?: "Loading"}${percentage}\u2026" // `...` character at the end
+        if (done != null && total != null && total > 0)
+          String.format(Locale.getDefault(), " %.1f%%", done.toFloat() / total * 100)
+        else ""
+      showMessage(
+        "${status ?: "Loading"}${percentage}\u2026") // `...` character at the end
     }
   }
 
@@ -60,51 +66,13 @@ public class DefaultDevLoadingViewImplementation(
   }
 
   private fun showInternal(message: String) {
-    if (devLoadingPopup?.isShowing == true) {
-      // already showing
-      return
-    }
-    val currentActivity = reactInstanceDevHelper.currentActivity
-    if (currentActivity == null) {
-      FLog.e(
-          ReactConstants.TAG,
-          "Unable to display loading message because react " + "activity isn't available")
-      return
-    }
-
-    // PopupWindow#showAtLocation uses absolute screen position. In order for
-    // loading view to be placed below status bar (if the status bar is present) we need to pass
-    // an appropriate Y offset.
-    try {
-      val rectangle = Rect()
-      currentActivity.window.decorView.getWindowVisibleDisplayFrame(rectangle)
-      val topOffset = rectangle.top
-      val inflater =
-          currentActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
-      val view = inflater.inflate(R.layout.dev_loading_view, null) as TextView
-      view.text = message
-      val popup =
-          PopupWindow(
-              view, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)
-      popup.isTouchable = false
-      popup.showAtLocation(currentActivity.window.decorView, Gravity.NO_GRAVITY, 0, topOffset)
-      devLoadingView = view
-      devLoadingPopup = popup
-      // TODO T164786028: Find out the root cause of the BadTokenException exception here
-    } catch (e: WindowManager.BadTokenException) {
-      FLog.e(
-          ReactConstants.TAG,
-          "Unable to display loading message because react activity isn't active, message: $message")
-    }
+    val currentActivity = reactInstanceDevHelper.currentActivity as DevLoadingMessageDisplay
+    currentActivity.showMessage(message)
   }
 
   private fun hideInternal() {
-    val popup = devLoadingPopup ?: return
-    if (popup.isShowing == true) {
-      popup.dismiss()
-      devLoadingPopup = null
-      devLoadingView = null
-    }
+    val currentActivity = reactInstanceDevHelper.currentActivity as DevLoadingMessageDisplay
+    currentActivity.hideMessage()
   }
 
   private val context: Context?
@@ -118,3 +86,4 @@ public class DefaultDevLoadingViewImplementation(
     }
   }
 }
+
diff --git a/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevServerHelper.java b/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevServerHelper.java
index 0a9fab60e39ce79c5a9d200dd2a37dc13600796d..a1c8013e5a139a6c42cfd9eb818cda82b17975bb 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevServerHelper.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevServerHelper.java
@@ -11,6 +11,8 @@ import android.content.Context;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.provider.Settings.Secure;
+import android.util.Log;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import com.facebook.common.logging.FLog;
@@ -383,9 +385,10 @@ public class DevServerHelper {
       }
       additionalOptionsBuilder.append("&" + entry.getKey() + "=" + Uri.encode(entry.getValue()));
     }
-    return String.format(
+    String url =  String.format(
             Locale.US,
-            "http://%s/%s.%s?platform=android&dev=%s&lazy=%s&minify=%s&app=%s&modulesOnly=%s&runModule=%s",
+            "%s://%s/%s.%s?platform=android&dev=%s&lazy=%s&minify=%s&app=%s&modulesOnly=%s&runModule=%s",
+            mPackagerConnectionSettings.getDebugServerScheme(),
             host,
             mainModuleID,
             type.typeID(),
@@ -395,8 +398,10 @@ public class DevServerHelper {
             mPackageName,
             modulesOnly ? "true" : "false",
             runModule ? "true" : "false")
-        + (InspectorFlags.getFuseboxEnabled() ? "&excludeSource=true&sourcePaths=url-server" : "")
-        + additionalOptionsBuilder.toString();
+            + (InspectorFlags.getFuseboxEnabled() ? "&excludeSource=true&sourcePaths=url-server" : "")
+            + additionalOptionsBuilder.toString();
+    Log.e("MOJEEEE", url);
+    return url;
   }
 
   private String createBundleURL(String mainModuleID, BundleType type) {
diff --git a/ReactAndroid/src/main/java/com/facebook/react/devsupport/PackagerStatusCheck.kt b/ReactAndroid/src/main/java/com/facebook/react/devsupport/PackagerStatusCheck.kt
index 9f472e750d67b4de55d47a9fb545e9ffbd5a8672..3d1e37fa6b9e48108ee17d4eaf78151477a3e76a 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/devsupport/PackagerStatusCheck.kt
+++ b/ReactAndroid/src/main/java/com/facebook/react/devsupport/PackagerStatusCheck.kt
@@ -88,7 +88,7 @@ internal class PackagerStatusCheck {
   private companion object {
     private const val PACKAGER_OK_STATUS = "packager-status:running"
     private const val HTTP_CONNECT_TIMEOUT_MS = 5_000
-    private const val PACKAGER_STATUS_URL_TEMPLATE = "http://%s/status"
+    private const val PACKAGER_STATUS_URL_TEMPLATE = "https://%s/status"
 
     private fun createPackagerStatusURL(host: String): String =
         String.format(Locale.US, PACKAGER_STATUS_URL_TEMPLATE, host)
diff --git a/ReactAndroid/src/main/java/com/facebook/react/packagerconnection/PackagerConnectionSettings.kt b/ReactAndroid/src/main/java/com/facebook/react/packagerconnection/PackagerConnectionSettings.kt
index d31b85aa912d7b99e73d51bd4a7c0a896902e367..2b8cc31af979db005eb644fbd7729238e34258f3 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/packagerconnection/PackagerConnectionSettings.kt
+++ b/ReactAndroid/src/main/java/com/facebook/react/packagerconnection/PackagerConnectionSettings.kt
@@ -15,14 +15,29 @@ import android.preference.PreferenceManager
 import com.facebook.common.logging.FLog
 import com.facebook.react.modules.systeminfo.AndroidInfoHelpers
 
+public interface PackagerConnectionSettingsProvider {
+  public val settings: ConnectionSettings
+}
+
+public interface ConnectionSettings {
+  public val scheme: String
+  public val host: String
+}
+
 public open class PackagerConnectionSettings(private val appContext: Context) {
+  private val settings = if (appContext is PackagerConnectionSettingsProvider)  appContext.settings else null
   private val preferences: SharedPreferences =
       PreferenceManager.getDefaultSharedPreferences(appContext)
   public val packageName: String = appContext.packageName
   private val _additionalOptionsForPackager: MutableMap<String, String> = mutableMapOf()
 
+  public open var debugServerScheme: String = settings?.scheme?:"http"
+
   public open var debugServerHost: String
     get() {
+      if (settings != null) {
+        return settings.host
+      }
       // Check host setting first. If empty try to detect emulator type and use default
       // hostname for those
       val hostFromSettings = preferences.getString(PREFS_DEBUG_SERVER_HOST_KEY, null)
@@ -38,7 +53,9 @@ public open class PackagerConnectionSettings(private val appContext: Context) {
       return host
     }
     set(host) {
-      preferences.edit().putString(PREFS_DEBUG_SERVER_HOST_KEY, host).apply()
+      if(settings == null) {
+        preferences.edit().putString(PREFS_DEBUG_SERVER_HOST_KEY, host).apply()
+      }
     }
 
   public fun setAdditionalOptionForPackager(key: String, value: String) {
diff --git a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.h b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.h
index 0593dccc87a0c6d7c5a739a661465735adc0a62b..db50e81bc53f13a8376f8dac4cf974185c722624 100644
--- a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.h
+++ b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.h
@@ -25,6 +25,8 @@ NS_ASSUME_NONNULL_BEGIN
 RCT_EXTERN NSString *RCTInstanceRuntimeDiagnosticFlags(void);
 RCT_EXTERN void RCTInstanceSetRuntimeDiagnosticFlags(NSString *_Nullable flags);
 
+static NSString * const VibecodeBundleLoadingProgress = @"VibecodeBundleLoadingProgress";
+
 @class RCTBundleManager;
 @class RCTInstance;
 @class RCTJSThreadManager;
diff --git a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
index 39285dcaaab25a9fa8b91c9f03c579c5a7477f9d..1d5be262664326da244a4418a7d52d9c411ed8a2 100644
--- a/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
+++ b/ReactCommon/react/runtime/platform/ios/ReactCommon/RCTInstance.mm
@@ -444,13 +444,19 @@ - (void)handleBundleLoadingError:(NSError *)error
 
 - (void)_loadJSBundle:(NSURL *)sourceURL
 {
-#if RCT_DEV_MENU && __has_include(<React/RCTDevLoadingViewProtocol.h>)
-  {
-    id<RCTDevLoadingViewProtocol> loadingView =
-        (id<RCTDevLoadingViewProtocol>)[_turboModuleManager moduleForName:"DevLoadingView"];
-    [loadingView showWithURL:sourceURL];
-  }
-#endif
+//#if RCT_DEV_MENU && __has_include(<React/RCTDevLoadingViewProtocol.h>)
+//  {
+//    id<RCTDevLoadingViewProtocol> loadingView =
+//        (id<RCTDevLoadingViewProtocol>)[_turboModuleManager moduleForName:"DevLoadingView"];
+//    [loadingView showWithURL:sourceURL];
+//  }
+//#endif
+
+  // Emit bundle loading started event
+  [[NSNotificationCenter defaultCenter] postNotificationName:VibecodeBundleLoadingProgress
+                                                      object:self
+                                                    userInfo:@{}];
+
 
   __weak __typeof(self) weakSelf = self;
   [_delegate loadBundleAtURL:sourceURL
@@ -459,12 +465,30 @@ - (void)_loadJSBundle:(NSURL *)sourceURL
         if (!strongSelf) {
           return;
         }
+        
+        // Emit bundle loading progress event
+        NSMutableDictionary *progressUserInfo = [NSMutableDictionary dictionary];
 
-#if RCT_DEV_MENU && __has_include(<React/RCTDevLoadingViewProtocol.h>)
-        id<RCTDevLoadingViewProtocol> loadingView =
-            (id<RCTDevLoadingViewProtocol>)[strongSelf->_turboModuleManager moduleForName:"DevLoadingView"];
-        [loadingView updateProgress:progressData];
-#endif
+        if (progressData) {
+          if (progressData.done != nil) {
+            progressUserInfo[@"done"] = progressData.done;
+          }
+          if (progressData.total != nil) {
+            progressUserInfo[@"total"] = progressData.total;
+          }
+          if (progressData.status) {
+            progressUserInfo[@"status"] = progressData.status;
+          }
+        }
+        [[NSNotificationCenter defaultCenter] postNotificationName:VibecodeBundleLoadingProgress
+                                                            object:strongSelf
+                                                          userInfo:progressUserInfo];
+        
+//#if RCT_DEV_MENU && __has_include(<React/RCTDevLoadingViewProtocol.h>)
+//        id<RCTDevLoadingViewProtocol> loadingView =
+//            (id<RCTDevLoadingViewProtocol>)[strongSelf->_turboModuleManager moduleForName:"DevLoadingView"];
+//        [loadingView updateProgress:progressData];
+//#endif
       }
       onComplete:^(NSError *error, RCTSource *source) {
         __typeof(self) strongSelf = weakSelf;
diff --git a/src/private/inspector/Inspector.js b/src/private/inspector/Inspector.js
index 304466bfd1e0524d60564f94805460f22866fa25..69400f8f28e132f464669cf9495e76053f70f08b 100644
--- a/src/private/inspector/Inspector.js
+++ b/src/private/inspector/Inspector.js
@@ -17,9 +17,9 @@ import type {
 } from '../../../Libraries/Renderer/shims/ReactNativeTypes';
 import type {ViewStyleProp} from '../../../Libraries/StyleSheet/StyleSheet';
 import type {ReactDevToolsAgent} from '../../../Libraries/Types/ReactDevToolsTypes';
-
 import SafeAreaView from '../components/SafeAreaView_INTERNAL_DO_NOT_USE';
 import React from 'react';
+import { requireOptionalNativeModule } from 'expo-modules-core';
 
 const View = require('../../../Libraries/Components/View/View').default;
 const PressabilityDebug = require('../../../Libraries/Pressability/PressabilityDebug');
@@ -66,10 +66,13 @@ function Inspector({
   const [panelPosition, setPanelPosition] = useState<PanelPosition>('bottom');
   const [inspectedElement, setInspectedElement] =
     useState<?InspectedElement>(null);
+
   const [selectionIndex, setSelectionIndex] = useState<?number>(null);
   const [elementsHierarchy, setElementsHierarchy] =
     useState<?ElementsHierarchy>(null);
 
+  const VibecodeExpoModule = requireOptionalNativeModule('VibecodeExpoModule');
+
   const setSelection = (i: number) => {
     const hierarchyItem = elementsHierarchy?.[i];
     if (hierarchyItem == null) {
@@ -102,6 +105,16 @@ function Inspector({
         closestInstance,
       } = viewData;
 
+      if (VibecodeExpoModule && VibecodeExpoModule.sendSelectedElementData) {
+        const elementData = {
+          hierarchy: hierarchy.map(item => item.name),
+          frame,
+          style: props.style,
+        };
+
+        VibecodeExpoModule.sendSelectedElementData(elementData);
+      }
+
       // Sync the touched view with React DevTools.
       // Note: This is Paper only. To support Fabric,
       // DevTools needs to be updated to not rely on view tags.
@@ -169,7 +182,7 @@ function Inspector({
         />
       )}
 
-      <SafeAreaView style={[styles.panelContainer, panelContainerStyle]}>
+      {/* <SafeAreaView style={[styles.panelContainer, panelContainerStyle]}>
         <InspectorPanel
           devtoolsIsOpen={!!reactDevToolsAgent}
           inspecting={selectedTab === 'elements-inspector'}
@@ -185,7 +198,7 @@ function Inspector({
           networking={selectedTab === 'network-profiling'}
           setNetworking={setNetworking}
         />
-      </SafeAreaView>
+      </SafeAreaView> */}
     </View>
   );
 }
